{"version":3,"sources":["pokecard.js","pokedex.js","pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","_this$props","this","props","name","type","exp","id","imgSrc","concat","slice","react_default","a","createElement","className","src","alt","Component","pokedex","cards","pokemon","map","p","pokecard_Pokecard","key","base_experience","style","color","isWinner","textTransform","fontSize","pokegame","hand1","hand2","Object","toConsumableArray","length","randIdx","Math","floor","random","randPokemon","splice","push","console","log","hand1Points","reduce","hand2Points","pokedex_pokedex","defaultProps","App","pokegame_pokegame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.473af70e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './pokecard.css';\r\n\r\nconst poke_api = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\r\nlet threeDigitId = (number) => (number <= 809 ? `00${number}`.slice(-3) : number);\r\n\r\nexport default class Pokecard extends Component {\r\n\trender() {\r\n\t\tconst { name, type, exp, id } = this.props;\r\n\t\tlet imgSrc = `${poke_api}${threeDigitId(id)}.png`;\r\n\t\treturn (\r\n\t\t\t<div className=\"Pokecard\">\r\n\t\t\t\t<h1 className=\"Pokecard-title\">{name}</h1>\r\n\t\t\t\t<img className=\"Pokecard-img\" src={imgSrc} alt={name} />\r\n\t\t\t\t<div className=\"Pokecard-data\">Type: {type}</div>\r\n\t\t\t\t<div className=\"Pokecard-data\">Exp: {exp}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport Pokecard from './pokecard';\r\nimport './pokedex.css';\r\n\r\nexport default class pokedex extends Component {\r\n\trender() {\r\n\t\tlet cards = this.props.pokemon.map((p) => (\r\n\t\t\t<Pokecard key={p.name + p.id} name={p.name} type={p.type} exp={p.base_experience} id={p.id} />\r\n\t\t));\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"Pokedex\">\r\n\t\t\t\t<h1 style={{ color: this.props.isWinner ? 'green' : 'red', textTransform: 'uppercase' }}>\r\n\t\t\t\t\t{this.props.isWinner ? 'Winning Hand' : 'Loosing Hand'}\r\n\t\t\t\t</h1>\r\n\r\n\t\t\t\t<h3 style={{ fontSize: '.5cm' }}>Total Experience: {this.props.exp} &emsp;</h3>\r\n\r\n\t\t\t\t<div className=\"Pokedex-cards\">{cards}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport Pokedex from './pokedex';\r\n\r\nexport default class pokegame extends Component {\r\n\tstatic defaultProps = {\r\n\t\tpokemon: [\r\n\t\t\t{ id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\r\n\t\t\t{ id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\r\n\t\t\t{ id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\r\n\t\t\t{ id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\r\n\t\t\t{ id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\r\n\t\t\t{ id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\r\n\t\t\t{ id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\r\n\t\t\t{ id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\r\n\t\t]\r\n\t};\r\n\trender() {\r\n\t\tlet hand1 = [];\r\n\t\tlet hand2 = [ ...this.props.pokemon ];\r\n\t\twhile (hand1.length < hand2.length) {\r\n\t\t\tlet randIdx = Math.floor(Math.random() * hand2.length);\r\n\t\t\tlet randPokemon = hand2.splice(randIdx, 1)[0];\r\n\t\t\thand1.push(randPokemon);\r\n\t\t}\r\n\r\n\t\tconsole.log(hand1);\r\n\t\tconsole.log(hand2);\r\n\r\n\t\tlet hand1Points = hand1.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\r\n\r\n\t\tlet hand2Points = hand2.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);\r\n\t\t// let isWinner1;\r\n\t\t// let isWinner2;\r\n\t\t// hand1Points > hand2Points ? (isWinner1 = true) : (isWinner2 = true);\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Pokedex pokemon={hand1} exp={hand1Points} isWinner={hand1Points > hand2Points} />\r\n\t\t\t\t<Pokedex pokemon={hand2} exp={hand2Points} isWinner={hand2Points > hand1Points} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\nimport Pokegame from './pokegame';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Pokegame />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}